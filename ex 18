#include <stdio.h>
#define P 3 
#define R 3 
int main() 
{
    int alloc[P][R] = { {0, 1, 0}, {2, 0, 0}, {3, 0, 2} };
    int max[P][R]   = { {7, 5, 3}, {3, 2, 2}, {9, 0, 2} };
    int avail[R]    = {3, 3, 2};
    int need[P][R], finish[P] = {0}, safeSeq[P];
    for (int i = 0; i < P; i++)
        for (int j = 0; j < R; j++)
            need[i][j] = max[i][j] - alloc[i][j];
    int count = 0;
    while (count < P) 
	{
        int found = 0;
        for (int p = 0; p < P; p++)
		 {
            if (!finish[p]) 
			{
                int canRun = 1;
                for (int r = 0; r < R; r++) 
				{
                    if (need[p][r] > avail[r]) 
					{
                        canRun = 0;
                        break;
                    }
                }
                if (canRun) 
				{
                    for (int r = 0; r < R; r++)
                        avail[r] += alloc[p][r];
                    safeSeq[count++] = p;
                    finish[p] = 1;
                    found = 1;
                }
            }
        }
        if (!found) 
		{
            printf("System is not in a safe state.\n");
            return 0;
        }
    }
    printf("System is in a safe state.\nSafe sequence: ");
    for (int i = 0; i < P; i++)
        printf("P%d ", safeSeq[i]);
    printf("\n");
    return 0;
}
OUT PUT:
System is not in a safe state.
