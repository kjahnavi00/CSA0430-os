#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
#define NUM_THREADS 5
#define NUM_INCREMENTS 1000000
int counter = 0;
pthread_mutex_t counter_mutex;
void* increment_counter(void* arg)
 {
    for (int i = 0; i < NUM_INCREMENTS; i++) 
	{
        pthread_mutex_lock(&counter_mutex);
        counter++; 
        pthread_mutex_unlock(&counter_mutex);
    }
    pthread_exit(NULL);
}
int main() 
{
    pthread_t threads[NUM_THREADS];
    int status;
    if (pthread_mutex_init(&counter_mutex, NULL) != 0)
	 {
        printf("Mutex init failed\n");
        return 1;
    }
    for (int i = 0; i < NUM_THREADS; i++)
	 {
        status = pthread_create(&threads[i], NULL, increment_counter, NULL);
        if (status != 0) {
            printf("Failed to create thread %d\n", i);
            return 1;
        }
    }
    for (int i = 0; i < NUM_THREADS; i++) 
	{
        pthread_join(threads[i], NULL);
    }
    pthread_mutex_destroy(&counter_mutex);
    printf("Final counter value: %d\n", counter); 
    return 0;
}
OUT PUT:
Final counter value: 5000000
