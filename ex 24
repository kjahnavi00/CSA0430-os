#include <stdio.h>
#include <fcntl.h>      // For open() and O_* constants
#include <unistd.h>     // For read(), write(), close(), unlink()
#include <string.h>
#include <stdlib.h>

#define FILE_NAME "example.txt"
#define BUFFER_SIZE 100

int main() {
    int fd;
    ssize_t bytesWritten, bytesRead;
    char writeBuffer[] = "Hello, this is a system call demo in UNIX!";
    char readBuffer[BUFFER_SIZE];

    // 1. Create and open file for writing
    fd = open(FILE_NAME, O_CREAT | O_WRONLY, 0644);
    if (fd < 0) {
        perror("Error creating file");
        exit(EXIT_FAILURE);
    }
    printf("File '%s' created and opened for writing.\n", FILE_NAME);

    // 2. Write to file
    bytesWritten = write(fd, writeBuffer, strlen(writeBuffer));
    if (bytesWritten < 0) {
        perror("Error writing to file");
        close(fd);
        exit(EXIT_FAILURE);
    }
    printf("Wrote %zd bytes to the file.\n", bytesWritten);

    // 3. Close file after writing
    close(fd);

    // 4. Reopen file for reading
    fd = open(FILE_NAME, O_RDONLY);
    if (fd < 0) {
        perror("Error opening file for reading");
        exit(EXIT_FAILURE);
    }

    // 5. Read from file
    bytesRead = read(fd, readBuffer, BUFFER_SIZE - 1);
    if (bytesRead < 0) {
        perror("Error reading from file");
        close(fd);
        exit(EXIT_FAILURE);
    }
    readBuffer[bytesRead] = '\0';  // Null-terminate the string
    printf("Read %zd bytes from the file: \"%s\"\n", bytesRead, readBuffer);

    // 6. Close file after reading
    close(fd);

    // 7. Delete (unlink) the file
    if (unlink(FILE_NAME) == 0) {
        printf("File '%s' deleted successfully.\n", FILE_NAME);
    } else {
        perror("Error deleting the file");
    }

    return 0;
}
OUTPUT:
File 'example.txt' created and opened for writing.
Wrote 42 bytes to the file.
Read 42 bytes from the file: "Hello, this is a system call demo in UNIX!"
File 'example.txt' deleted successfully.
