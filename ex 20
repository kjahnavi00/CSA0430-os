#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t wrt;             // Semaphore for writer
pthread_mutex_t mutex; // Mutex for reader count

int readcount = 0;

void* reader(void* arg) {
    int id = *(int*)arg;

    pthread_mutex_lock(&mutex);
    readcount++;
    if (readcount == 1)
        sem_wait(&wrt);  // First reader locks writer
    pthread_mutex_unlock(&mutex);

    printf("Reader %d is reading...\n", id);
    sleep(1); // Simulate reading
    printf("Reader %d finished reading.\n", id);

    pthread_mutex_lock(&mutex);
    readcount--;
    if (readcount == 0)
        sem_post(&wrt);  // Last reader unlocks writer
    pthread_mutex_unlock(&mutex);

    return NULL;
}

void* writer(void* arg) {
    int id = *(int*)arg;

    sem_wait(&wrt);  // Wait for access
    printf("Writer %d is writing...\n", id);
    sleep(1); // Simulate writing
    printf("Writer %d finished writing.\n", id);
    sem_post(&wrt);

    return NULL;
}

int main() {
    pthread_t r[5], w[2];
    int r_id[5] = {1, 2, 3, 4, 5};
    int w_id[2] = {1, 2};

    sem_init(&wrt, 0, 1);
    pthread_mutex_init(&mutex, NULL);

    // Create threads
    for (int i = 0; i < 2; i++)
        pthread_create(&w[i], NULL, writer, &w_id[i]);

    for (int i = 0; i < 5; i++)
        pthread_create(&r[i], NULL, reader, &r_id[i]);

    // Join threads
    for (int i = 0; i < 2; i++)
        pthread_join(w[i], NULL);

    for (int i = 0; i < 5; i++)
        pthread_join(r[i], NULL);

    // Cleanup
    sem_destroy(&wrt);
    pthread_mutex_destroy(&mutex);

    return 0;
}

OUT PUT:
Writer 2 is writing...
Writer 2 finished writing.
Reader 2 is reading...
Reader 1 is reading...
Reader 3 is reading...
Reader 4 is reading...
Reader 5 is reading...
Reader 5 finished reading.
Reader 4 finished reading.
Reader 3 finished reading.
Reader 1 finished reading.
Reader 2 finished reading.
Writer 1 is writing...
Writer 1 finished writing.
